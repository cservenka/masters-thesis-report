procedure next_power_of_two(int pow_2_n)
    local int cur_pow = pow_2_n
    pow_2_n += cur_pow
    delocal int cur_pow = pow_2_n / 2

procedure allocate(int object_size, int free_lists[])
    local int pow_2_n = object_size

    // Find suitable power of two with free block
    from pow_2_n = object_size loop
        call next_power_of_two(pow_2_n)
    until (2 * pow_2_n) > object_size && free_lists[pow_2_n] != 0


    local int half_of_found_power_of_two = pow_2_n / 2
    from pow_2_n > half_of_found_power_of_two do
        // Allocate block
        free_lists[pow_2_n] -= 1
    loop 
        // Split block
        uncall next_power_of_two(pow_2_n)
        free_lists[pow_2_n] += 2
    until pow_2_n = object_size

    delocal int half_of_found_power_of_two = half_of_found_power_of_two
    delocal int pow_2_n = object_size


procedure main()
    int object_size
    int free_lists[9]
   
   object_size += 2
   free_lists[8] += 1

    call allocate(object_size, free_lists)