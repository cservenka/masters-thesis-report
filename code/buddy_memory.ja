procedure next_power_of_two(int pow_2_n)
    local int cur_pow = pow_2_n
    pow_2_n += cur_pow
    delocal int cur_pow = pow_2_n / 2

procedure allocate(int object_size, int free_lists[])
    local int pow_2_n = 2
    

    // Find power of two big enough for our object
    from pow_2_n = 2 loop
        call next_power_of_two(pow_2_n)
    until (2 * pow_2_n) > object_size && free_lists[pow_2_n] != 0

    //local int before_alloc = 0

    if (pow_2_n = object_size) && free_lists[pow_2_n] != 0 then
        //before_alloc += free_lists[pow_2_n]
        // Allocate
        free_lists[pow_2_n] -= 1

    else
        // Determine if we need to split blocks
        from (pow_2_n / 2) >= object_size do
            free_lists[pow_2_n / 2] += 2
            free_lists[pow_2_n] -= 1
            uncall next_power_of_two(pow_2_n)
        until ((pow_2_n / 2) < object_size) && (free_lists[pow_2_n] > 0)

            // Allocation
        free_lists[pow_2_n] -= 1

        call next_power_of_two(pow_2_n)
    fi pow_2_n = object_size
    
    from pow_2_n != 1 do
        show(pow_2_n)
        uncall next_power_of_two(pow_2_n)
        show(pow_2_n)
    until pow_2_n = 1

    delocal int pow_2_n = 1

procedure main()
    int object_size
    int free_lists[9]

    // Works
    object_size += 4
    free_lists[8] += 1

    // Works
    //object_size += 8
    //free_lists[8] += 1

    // Broken
    //object_size += 2
    //free_lists[2] += 1    

    call allocate(object_size, free_lists)